
import pandas as pd
from sklearn.preprocessing import LabelEncoder
from lifelines import CoxPHFitter, KaplanMeierFitter
from lifelines.utils import concordance_index
from sksurv.ensemble import RandomSurvivalForest
from sksurv.metrics import concordance_index_censored

data = pd.read_csv('newData.csv')

data.head()

data.shape

data.describe()

encoded_values = pd.DataFrame(columns=['Feature', 'Category', 'Encoded Value'])
category_feature = data.select_dtypes(include=['object']).columns

le = LabelEncoder()

for feature in category_feature:
    data[feature] = le.fit_transform(data[feature])

    for category, encoded_value in zip(le.classes_, le.transform(le.classes_)):
        temp_df = pd.DataFrame([{'Feature': feature, 'Category': category, 'Encoded Value': encoded_value}])

        encoded_values = pd.concat([encoded_values, temp_df], ignore_index=True)

data = data.drop(columns=['Education_Level'])
data['Level'] = data['Level']/100

data

events = data['Churn'].astype(bool)
var_churned = data.loc[events, 'Poor_Network_Quality_Coverage'].var()
var_not_churned = data.loc[~events, 'Poor_Network_Quality_Coverage'].var()

print(f"Variance for churned events: {var_churned}")
print(f"Variance for non-churned events: {var_not_churned}")

if var_churned < 1e-5 or var_not_churned < 1e-5:
    data = data.drop(columns=['Poor_Network_Quality_Coverage'])

cph = CoxPHFitter()
cph.fit(data, duration_col='Level', event_col='Churn')
cph.print_summary()

data['Cox_Predicted_Churn_Probability'] = cph.predict_partial_hazard(data)
print(data[['Cox_Predicted_Churn_Probability', 'Churn']])

from lifelines.utils import concordance_index

kmf = KaplanMeierFitter()
kmf.fit(data['Level'], event_observed=data['Churn'])
data['Kaplan_Meier_Predicted_Survival_Probability'] = kmf.predict(data['Level']).values

c_index = concordance_index(data['Level'], -data['Kaplan_Meier_Predicted_Survival_Probability'], data['Churn'])

print(data[['Kaplan_Meier_Predicted_Survival_Probability', 'Churn']])

data['Churn'] = data['Churn'].astype(bool)

X = data.drop(columns=['Level', 'Churn'])
rsf = RandomSurvivalForest()
y = data[['Churn','Level']].to_records(index=False)

rsf.fit(X, y)
rsf_pred = rsf.predict(X)
data['RSF_Predicted_Churn_Probability'] = rsf_pred
print(data[['RSF_Predicted_Churn_Probability', 'Churn']])

cox_cindex = concordance_index(data['Level'], -data['Cox_Predicted_Churn_Probability'], data['Churn'])

import matplotlib.pyplot as plt
import seaborn as sns
sns.set(style="whitegrid")

plt.figure(figsize=(10, 6))
cph.plot()
plt.title('Cox Proportional Hazards Model Coefficients')
plt.show()

plt.figure(figsize=(10, 6))
kmf.plot_cumulative_density()
plt.title('Survival curves using Kaplan-Meier Estimator')
plt.show()

plt.figure(figsize=(10, 6))
kmf.plot_survival_function()
plt.title('Survival curves using Kaplan-Meier Estimator')
plt.show()

plt.figure(figsize=(10, 6))
sns.kdeplot(data=data, x='Cox_Predicted_Churn_Probability', label='Cox', fill=True)
sns.kdeplot(data=data, x='RSF_Predicted_Churn_Probability', label='RSF', fill=True)
plt.title('Comparison of Predicted Churn Probabilities')
plt.xlabel('Predicted Churn Probability')
plt.ylabel('Density')
plt.legend()
plt.show()

print(f'Cox Proportional Hazards Model Concordance Index: {cox_cindex}')
print(f'Kaplan Meier Model Concordance Index: {c_index}')
rsf_cindex = concordance_index_censored(y['Churn'], y['Level'], rsf_pred)
print(f'Random Survival Forest Model Concordance Index: {rsf_cindex[0]}')

import plotly.graph_objects as go

cox_cindex = concordance_index(data['Level'], -data['Cox_Predicted_Churn_Probability'], data['Churn'])
km_cindex = c_index
rsf_cindex = concordance_index_censored(y['Churn'], y['Level'], rsf_pred)[0]

fig = go.Figure(data=[
    go.Bar(name='Cox Proportional Hazards Model', x=['Concordance Index'], y=[cox_cindex]),
    go.Bar(name='Kaplan-Meier Model', x=['Concordance Index'], y=[km_cindex]),
    go.Bar(name='Random Survival Forest Model', x=['Concordance Index'], y=[rsf_cindex])
])

fig.update_layout(barmode='group', title='Concordance Index Comparison', yaxis=dict(range=[0, 1]))

fig.show()